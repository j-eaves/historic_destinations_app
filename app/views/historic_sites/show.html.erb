<!-- https://stackoverflow.com/questions/35610873/google-maps-with-responsive-sidebar -->

	<!-- &callback=initialize was previously &callback=initMap but didn't work -->
	<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAti92VRg88Ky1xV1XAaqh9fi7r9amnKqE&callback=initialize&libraries=geometry&sensor=false" async defer></script>

	<!-- <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?libraries=geometry&sensor=false"></script> -->

	<div id="wrapper">
	  <!-- Sidebar -->
	  <div id="sidebar-wrapper">

	    <ul class="sidebar-nav" id="side_bar">
	      <li class="sidebar-brand" style="font-weight: bold; color: ##0B0B0B;">
	        <h3 >Historic Sites</h3>
	      </li>
	      <hr>
	    </ul>
	  </div>
	  <!-- /#sidebar-wrapper -->
	  <!-- Page Content -->
	  <div id="page-content-wrapper">
	  	<!-- /#search form -->
	      <%= form_tag "/historic_sites", method: :post, class: "navbar-form navbar-left" do %>
	        <div id="app" class="form-group">
		        <p><input type="text" class="form-control" placeholder="Enter Destination" name="search_address">
		        <button type="submit" class="btn btn-primary">Submit</button></p>
	        </div>
	      <% end %>
	    <div class="container-fluid">
	      <div class="row">
	        <div class="col-lg-12">
	          <h1>
		    <a href="#menu-toggle" class="gradient-menu" id="menu-toggle"></a>
	          &nbsp;search results&nbsp;<!-- a href="#menu-toggle" class="btn btn-default" >Toggle Sidebar</a -->
	          </h1>
	          <!-- you can use tables or divs for the overall layout -->
	          <div id="map_canvas"></div>
	          <!-- <h1>Simple Sidebar</h1> -->
	        </div>
	      </div>
	    </div>
	  </div>
	  <!-- /#page-content-wrapper -->
	</div>
	<!-- /#wrapper -->

	<div id="app">
	  <!-- {{ sites }}
		<div v-for="site in sites">
		  	<p> Name of historic site: {{ site.name }} </p>
		  	<hr>
		</div> -->
	</div>

	<!-- <div id="map_canvas"></div> -->

	<script>
		//the google.maps.event.addDomListener was here, but now is at the bottom

		// arrays to hold copies of the markers and html used by the side_bar 
		// because the function closure trick doesnt work there 
		var gmarkers = [];
		var map = null;

		//my variables from the other page
		var geocoder;
		//var map;
		var historicalSites = [];//declare this variable outside of the $.Get function
		var nycHistoricSites = [];//declare this variable outside of the $.Get function
		var allSites = [];
		var latitude = parseFloat("<%= @lat %>");//mine
		var longitude = parseFloat("<%= @lng %>");//mine
		var centerPoint = {name: "Your Location: <%= @address %>", latitude: latitude, longitude: longitude};//mine

		//convert from meters to feet
		//Used for calculating distance from center point to a pin on the map

		var convertMetersToImperial = function(meters) {
			var result = "";
			var feet = meters/0.304800609601;
			var miles = feet/5280;
			if (miles > 1) {
				result += miles.toFixed(2).toString() + " miles away"
			} else {
				result += feet.toFixed(2).toString() + " feet away"
			}
			return result;
		};

		var convertDistanceToString = function(distanceInMiles) {
			var result = "";
			var feet = distanceInMiles/5280;
			if (distanceInMiles > 1) {
				result += distanceInMiles.toFixed(2).toString() + " miles away"
			} else {
				result += feet.toFixed(2).toString() + " feet away"
			}
			return result;
		};

		var convertMetersToMiles = function(meters) {
			var result = 0;
			var feet = meters/0.304800609601;
			var miles = feet/5280;
			return result;
		};

		// function appendToAllSitesArray(sitesArray){
		// 	for(var i = 0; i < sitesArray.length; i++){
		// 		allSites.push(sitesArray[i]);
		// 	}
		// }

		// function distanceFromCenterPoint(centerPoint, jsonObject){
		// 	console.log("Count 1");
		// 	var myLatLng = {latitude: jsonObject.latitude, longitude: jsonObject.longitude};
		// 	return google.maps.geometry.spherical.computeDistanceBetween(centerPoint, ( myLatLng['latitude'], myLatLng['longitude']);
		// }

		// function distanceFromCenterPoint(centerPoint, jsonArray){
		// 	distMeters = 0;
		// 	for(var i = 0; i < jsonArray.length; i++){
		// 		var myLatLng = {latitude: jsonArray[i].latitude, longitude: jsonArray[i].longitude};
		// 		distMeters = google.maps.geometry.spherical.computeDistanceBetween(centerPoint, myLatLng);
		// 		var miles = convertMetersToMiles(distMeters);
		// 		jsonArray[i]["distance"] = miles; 
		// 	}
		// }

		// function sortByDistAsc(jsonArray){
		// 	homes.sort(function(a, b) {
		// 	    return parseFloat(a.price) - parseFloat(b.price);
		// 	});
		// }

		//end of my variables and functions

		function initialize() {
			var myWrapper = $("#wrapper");
			$("#menu-toggle").click(function(e) {
				e.preventDefault();
				$("#wrapper").toggleClass("toggled");
				myWrapper.one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend', function(e) {
				  // code to execute after transition ends
				  google.maps.event.trigger(map, 'resize');
				});
			});
			// create the map
			var myOptions = {
			zoom: 12,
			center: new google.maps.LatLng(latitude, longitude),
			//center: new google.maps.LatLng(43.907787, -79.359741),
			mapTypeControl: true,
			mapTypeControlOptions: {
			  style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
			},
			navigationControl: true,
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			scaleControl: true,
			styles: [
			    {
			        "featureType": "landscape",
			        "stylers": [
			            {
			                "saturation": -7
			            },
			            {
			                "gamma": 1.02
			            },
			            {
			                "hue": "#ffc300"
			            },
			            {
			                "lightness": -10
			            }
			        ]
			    },
			    {
			        "featureType": "road.highway",
			        "stylers": [
			            {
			                "hue": "#ffaa00"
			            },
			            {
			                "saturation": -45
			            },
			            {
			                "gamma": 1
			            },
			            {
			                "lightness": -4
			            }
			        ]
			    },
			    {
			        "featureType": "road.arterial",
			        "stylers": [
			            {
			                "hue": "#ffaa00"
			            },
			            {
			                "lightness": -10
			            },
			            {
			                "saturation": 64
			            },
			            {
			                "gamma": 0.9
			            }
			        ]
			    },
			    {
			        "featureType": "road.local",
			        "stylers": [
			            {
			                "lightness": -5
			            },
			            {
			                "hue": "#00f6ff"
			            },
			            {
			                "saturation": -40
			            },
			            {
			                "gamma": 0.75
			            }
			        ]
			    },
			    {
			        "featureType": "poi",
			        "stylers": [
			            {
			                "saturation": -30
			            },
			            {
			                "lightness": 11
			            },
			            {
			                "gamma": 0.5
			            },
			            {
			                "hue": "#ff8000"
			            }
			        ]
			    },
			    {
			        "featureType": "water",
			        "stylers": [
			            {
			                "hue": "#0077ff"
			            },
			            {
			                "gamma": 1.25
			            },
			            {
			                "saturation": -22
			            },
			            {
			                "lightness": -31
			            }
			        ]
			    }
			]
				//SNAZZY MAP GOES HERE!
			}
			map = new google.maps.Map(document.getElementById("map_canvas"),
			myOptions);

			google.maps.event.addListener(map, 'click', function() {
			infowindow.close();
			});

			//original author's code:
			// Add markers to the map
			// Set up three markers with info windows 
			// add the points
			//Create points and markers to the map:
			// var point = new google.maps.LatLng(43.65654, -79.90138);
			// var marker = createMarker(point, "This place", "Some stuff to display in the<br>First Info Window")

			// var point = new google.maps.LatLng(43.91892, -78.89231);
			// var marker = createMarker(point, "That place", "Some stuff to display in the<br>Second Info Window")

			// var point = new google.maps.LatLng(43.82589, -78.89231);
			// var marker = createMarker(point, "The other place", "Some stuff to display in the<br>Third Info Window")

			function createCenterMarker(centerPointHash){
				//Create a center point parker that is different from the rest
			    var pinImage = new google.maps.MarkerImage("http://www.googlemapsmarkers.com/v1/009900/");
			    // Create a marker and set its position.
			    var marker1 = new google.maps.Marker({
			      position: {lat: centerPointHash.latitude, lng: centerPointHash.longitude},
			      title: centerPointHash.name,
			      icon: pinImage,
			      map: map
			    });
			    //infoWindow(marker1, map, centerPointHash);
			};



			createCenterMarker(centerPoint);

			//grab the (state) historical sites from my tables via my api
			$.get("/api/v1/sites", function(response) {
				console.log('This is the $.get /api/v1/sites function')
				//create an array and fill it with all of the historicalSites
				historicalSites = response;
				// LOOP THROUGH HISTORICALSITES
				$.get("/api/v1/houses", function(response) {
					console.log('This is the $.get /api/v1/houses function')
					console.log("HOUSESSSSS");
					//create an array and fill it with all of the historicalSites
					nycHistoricSites = response;
					console.log("********Here are all of the sites!*******")
					console.log(historicalSites);
					console.log(nycHistoricSites);
					allSites = historicalSites.concat(nycHistoricSites);
					console.log(allSites[0]['longitude'])
					// for( var i = 0; i < allSites.length; i++){
					// 	console.log("Count 2");
					// 	allSites[i]['distance'] = distanceFromCenterPoint(centerPoint, allSites[i]);
					// }
					console.log("allSites");
					console.log(allSites);
					console.log(allSites);
					//console.log(nycHistoricSites);
			  		for (var i = 0; i < nycHistoricSites.length; i++) {
			    		//call the function createMarker()
			    		createMarker(nycHistoricSites[i]);
			  		}
				}.bind(this));
				// add distance to each object
				// {name: 'something', other: 'other_val'}
				// {name: 'something', other: 'other_val', distance: '1 mile'}
			  	for (var i = 0; i < historicalSites.length; i++) {
			    	//call the function createMarker()
			    	createMarker(historicalSites[i]);
			  	}
			}.bind(this));

			//add the contents of the first array to the array of all sites

			// //grab the historical house sites from my tables via my api
			// $.get("/api/v1/houses", function(response) {
			// 	console.log('This is the $.get /api/v1/sites function')
			// 	//create an array and fill it with all of the historicalSites
			// 	nycHistoricSites = response;
			//   	for (var i = 0; i < nycHistoricSites.length; i++) {
			//     	//call the function createMarker()
			//     	createMarker(nycHistoricSites[i]);
			//   	}
			// }.bind(this));

			//} //this was the original closing bracket location for initialize
			//the functions infowindow,createMarker were placed inside the initialize function by me, to make the app work

			// infowindow from this guy's code:
			var infowindow = new google.maps.InfoWindow({
			  size: new google.maps.Size(150, 50)
			});

			//my old infowindow
			// var infowindow = new google.maps.InfoWindow({
			//		maxWidth: 385
			// });

			// This function picks up the click and opens the corresponding info window
			function myclick(i) {
			  google.maps.event.trigger(gmarkers[i], "click");
			}

			////-----------------
			//// MY infoWindow function from sites/show.html.erb was here - gone
			////-----------------

			//ADDRESS IMAGE SIZE AND ENLARGING
			function jsonInfoToHtml(jsonData) {
				//takes json data from one historical site and returns a string for an infowindow - REPLACES STRING CODE IN infoWindow() above
				var jsonData_url = "<h3><b><a href="+jsonData.url+">"+jsonData.name+"</a></b></h3>";
			    var phone = "<p>"+jsonData.phone+"</p>";
			    var jsonData_image_url = "<p><img class='enlarge-onhover' src="+jsonData.image_url+" alt="+jsonData.alt_image_url+"></p>";
			    var jsonData_description = "<p>"+jsonData.description+"</p>";
			    var html = jsonData_url+phone+jsonData_image_url+jsonData_description;
			    //var contentString = html;
			    return html;
			}

			

			//My own create marker function:
			function createMarker(jsonData){
				// Create a marker and set its position.
				var point = new google.maps.LatLng(jsonData.latitude, jsonData.longitude);
			    var marker = new google.maps.Marker({
			      position: point,
			      map: map, 
			      title: jsonData.name,
				  //zIndex: Math.round(latlng.lat() * -100000) << 5 //this was breaking...
			    });
			    //-----------------
			    // Calculate distance from center to clicked destination marker return string
			    var center = map.getCenter();//this comes from user input
				var markerLatLng = marker.getPosition();
				//console.log("markerLatLng:")
				//console.log(markerLatLng);
				//the distance variable may require a different google api script...
				var distance = google.maps.geometry.spherical.computeDistanceBetween(center, markerLatLng);
				var htmlDistance = "<p>"+convertMetersToImperial(distance)+"</p>";
			    //-----------------
			    //create html content for infowindows to display when clicked
			    var html = jsonInfoToHtml(jsonData);
			    var contentString = html + htmlDistance;//html used to be an argument for the function
				//-----------------

			    //infoWindow(marker, map, jsonData);//Do these arguments need to be modified?
			  
			    google.maps.event.addListener(marker, 'click', function() {
			      //use an if statement to differentiate reg pins from center
			   	  // if (jsonData.name.includes("Your Location:")) {
				  //     var centerPointHtml = "<div><h3>" + jsonData.name + "</h3><p>";
				  //     infowindow.setContent(centerPointHtml);
				  // } else {
				  //   	infowindow.setContent(contentString);
				  // }
			      //// open the infowindow on the marker.
			      infowindow.setContent(contentString);//content string goes here...
			      infowindow.open(map, marker);
			    });
	    	
	    		//save the info we need to use later for the side_bar
			    gmarkers.push(marker);
			    //add a line to the side_bar html
				var sidebar = $('#side_bar');
				var sidebar_entry = $('<li/>', {
				//'html': name, //this was the old variable from his code...
				'html': jsonData.name + htmlDistance, 
				'click': function() {
				  google.maps.event.trigger(marker, 'click');
				},
				'mouseenter': function() {
				  $(this).css('color', 'red');
				},
				'mouseleave': function() {
				  $(this).css('color', '#0B0B0B');
				}
				}).appendTo(sidebar);
			 } //END createMarker()
			//-----------------
			console.log(gmarkers[0]);
			// //**** THIS IS THE OLD createMarker FUNCTION of the author's ****//
			// // A function to create the marker and set up the event window function 
			// //html will be a pre-made variable...
			// function createMarker(latlng, name, html) {
			//   var contentString = html;
			//   ////added to my createMarker function////
			//   var marker = new google.maps.Marker({
			//     position: latlng,
			//     map: map,
			//     zIndex: Math.round(latlng.lat() * -100000) << 5
			//   });
			//   ////added to my createMarker function////
			//   google.maps.event.addListener(marker, 'click', function() {
			//     infowindow.setContent(contentString);
			//     infowindow.open(map, marker);
			//   });
			//   ////added to my createMarker function////
			//   // save the info we need to use later for the side_bar
			//   gmarkers.push(marker);
			//   ////added to my createMarker function////
			//   // add a line to the side_bar html
			//   var sidebar = $('#side_bar');
			//   var sidebar_entry = $('<li/>', {
			//     'html': name,
			//     'click': function() {
			//       google.maps.event.trigger(marker, 'click');
			//     },
			//     'mouseenter': function() {
			//       $(this).css('color', 'red');
			//     },
			//     'mouseleave': function() {
			//       $(this).css('color', '#999999');
			//     }
			//   }).appendTo(sidebar);
			// }
		} //this is where i moved the closing bracket for initialize()

		 google.maps.event.addDomListener(window, 'load', initialize);
	</script>






